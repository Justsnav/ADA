// Switch to MoviesDB (will create the database if it doesn't exist) use MoviesDB

// Create the Movies collection db.createCollection("Movies")

// Insert sample documents into the Movies collection db.Movies.insertMany([
{ title: "Inception", director: "Christopher Nolan", genre: "Science Fiction", year: 2010, ratings: { imdb: 8.8, rottenTomatoes: 87 } },
{ title: "The Matrix", director: "Wachowskis", genre: "Science Fiction", year: 1999, ratings: { imdb: 8.7, rottenTomatoes: 87 } },
{ title: "The Godfather", director: "Francis Ford Coppola", genre: "Crime", year: 1972, ratings: { imdb: 9.2, rottenTomatoes: 97 } },
{ title: "Pulp Fiction", director: "Quentin Tarantino", genre: "Crime", year: 1994, ratings: { imdb: 8.9, rottenTomatoes: 92 } },
{ title: "The Shawshank Redemption", director: "Frank Darabont", genre: "Drama", year: 1994, ratings: { imdb: 9.3, rottenTomatoes: 91 } },
{ title: "The Dark Knight", director: "Christopher Nolan", genre: "Action", year: 2008, ratings: { imdb: 9.0, rottenTomatoes: 94 } },
{ title: "Fight Club", director: "David Fincher", genre: "Drama", year: 1999, ratings: { imdb: 8.8, rottenTomatoes: 79 } }
])


// =====================
// 1. Creating Indexes
// =====================


// a. Unique Index: Prevent duplicate movie titles db.Movies.createIndex({ title: 1 }, { unique: true })
 
// b. Sparse Index: Index only documents that include the "awards" field- A sparse index in databases like MongoDB is an index that only includes documents that contain the field being indexed.
// Update a document to include an "awards" field (only for demonstration) db.Movies.updateOne(
{ title: "The Godfather" },
{ $set: { awards: "Best Picture" } }
)
// Create the sparse index on the awards field
db.Movies.createIndex({ awards: 1 }, { sparse: true })


// c. Compound Index: Optimize queries filtering by director and year db.Movies.createIndex({ director: 1, year: 1 })

// d. Multikey Index: Create an index on an array field "actors"
// Update a document to include an actors array db.Movies.updateOne(
{ title: "Inception" },
{ $set: { actors: ["Leonardo DiCaprio", "Joseph Gordon-Levitt", "Elliot Page"] } }
)
// Create the index on the actors field (automatically becomes a multikey index) db.Movies.createIndex({ actors: 1 })

// =====================
// 2. Query Optimization
// =====================


// Run a query with an explain plan to see if the indexes are used
// This query searches for movies directed by "Christopher Nolan"
 
db.Movies.find({ director: "Christopher Nolan" }).explain("executionStats")
