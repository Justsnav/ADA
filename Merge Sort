#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#define MAX 50000
void mergeSort(int arr[], int low, int mid, int high);
void partition(int arr[], int low, int high);
double tc;
time_t start, end;
int main() {
 int n, i, arr[MAX];
 clock_t start, end;
 double cpu_time_used;
 printf("Enter the number of elements (n) greater than 5000: ");
 scanf("%d", &n);
 //printf("Randomly generated array: ");
 for (i = 0; i < n; i++) {
 arr[i] = rand() % 50000; // Generating random numbers between 0 to 49999
 // printf("%d ", arr[i]);
 }
 start = clock(); // Record the starting time
 partition(arr,0, n-1); // Perform Merge Sort
 end = clock(); // Record the ending time
 cpu_time_used = ((double)(end - start)) / CLOCKS_PER_SEC; // Calculate the time taken
 // printf("Sorted array: ");
 //for (i = 0; i < n; i++) {
 // printf("%d ", arr[i]);
 //}
 printf("Time taken for sorting: %lf seconds\n", cpu_time_used);
 return 0;
}
void partition(int arr[], int low, int high)
{
 int mid;
 if (low < high)
 {
 mid = (low + high) / 2;
 partition(arr, low, mid);
 partition(arr, mid + 1, high);
 mergeSort(arr, low, mid, high);
 }
}
void mergeSort(int arr[], int low, int mid, int high)
{
 int i, m, k, l, temp[MAX];
 l = low;
 i = low;
 m = mid + 1;
 while ((l <= mid) && (m <= high))//i<p && j<q
 {
 if (arr[l] <= arr[m]) // B[i]<=C[j]
 {
 temp[i] = arr[l];//A[k]B[i]; i++
 l++;
 }
 else
 {
 temp[i] = arr[m];//A[k]C[j];j++
 m++;
 }
 i++;
 }
 while (l <= mid)
 {
 temp[i] = arr[l];
 i++;
 l++;
 }
 while (m <= high)
 {
 temp[i] = arr[m];
 i++;
 m++;
 }
 for (k = low; k <= high; k++)
 {
 arr[k] = temp[k];
 }
}
