#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#define MAX 50000
double tc;
time_t start, end;
// Function to perform partitioning
int partition(int arr[], int low, int high) {
 int pivot = arr[low]; // Choosing first element as pivot
 int i = low + 1, j = high, temp;
 while (i <= j) {
 while (i <= high && arr[i] <= pivot) // Allow equal elements
 i++;
 while (
&& arr[j] > pivot) // Ensure j does not go below low
 j--;
 if (i < j) {
 // Swap arr[i] and arr[j]
 temp = arr[i];
 arr[i] = arr[j];
 arr[j] = temp;
 }
 }

 // Swap pivot with arr[j] (correct position)
 temp = arr[j];
 arr[j] = arr[low];
 arr[low] = temp;
 return j; // Pivot final position
}
// Function to perform Quick Sort
void quickSort(int arr[], int low, int high) {
 if (low < high) {
 int j = partition(arr, low, high);
 quickSort(arr, low, j - 1);
 quickSort(arr, j + 1, high);
 }
}
int main() {
 int n, i, arr[MAX];
 clock_t start, end;
 double cpu_time_used;
 printf("Enter the number of elements (n) greater than 5000: ");
 scanf("%d", &n);
 printf("Randomly generated array: ");
 for (i = 0; i < n; i++) {
 arr[i] = rand() % 50000; // Generating random numbers between 0 to 9999
 printf("%d ", arr[i]);
 }
 start = clock(); // Record the starting time
 quickSort(arr,0,n-1); // Perform Quick Sort
 end = clock(); // Record the ending time
 cpu_time_used = ((double)(end - start)) / CLOCKS_PER_SEC; // Calculate the time taken
 printf("Sorted array: ");
 for (i = 0; i < n; i++) {
 printf("%d ", arr[i]);
}
 printf("Time taken for sorting: %lf seconds\n", cpu_time_used);
 return 0;
}
